//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ADMIN_GUI.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class STUDIFY2Entities : DbContext
    {
        public STUDIFY2Entities()
            : base("name=STUDIFY2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ADS> ADS { get; set; }
        public virtual DbSet<FACULTY> FACULTY { get; set; }
        public virtual DbSet<GROUP> GROUP { get; set; }
        public virtual DbSet<LESSON> LESSON { get; set; }
        public virtual DbSet<PROFESSION> PROFESSION { get; set; }
        public virtual DbSet<PROGRESS> PROGRESS { get; set; }
        public virtual DbSet<ROLE> ROLE { get; set; }
        public virtual DbSet<STUDENT> STUDENT { get; set; }
        public virtual DbSet<SUBGROUP> SUBGROUP { get; set; }
        public virtual DbSet<SUBJECT> SUBJECT { get; set; }
        public virtual DbSet<TASK> TASK { get; set; }
    
        public virtual int checkAdminData(string login, string password, ObjectParameter result)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("checkAdminData", loginParameter, passwordParameter, result);
        }
    
        public virtual int checkStudentData(string login, string password, ObjectParameter result)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("checkStudentData", loginParameter, passwordParameter, result);
        }
    
        public virtual int deleteFaculty(Nullable<int> faculty_id)
        {
            var faculty_idParameter = faculty_id.HasValue ?
                new ObjectParameter("faculty_id", faculty_id) :
                new ObjectParameter("faculty_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFaculty", faculty_idParameter);
        }
    
        public virtual int deleteGroup(Nullable<int> group_id)
        {
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteGroup", group_idParameter);
        }
    
        public virtual int deleteProfession(Nullable<int> profession_id)
        {
            var profession_idParameter = profession_id.HasValue ?
                new ObjectParameter("profession_id", profession_id) :
                new ObjectParameter("profession_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProfession", profession_idParameter);
        }
    
        public virtual int deleteStudent(Nullable<int> student_id)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteStudent", student_idParameter);
        }
    
        public virtual int deleteSubject(Nullable<int> subject_id)
        {
            var subject_idParameter = subject_id.HasValue ?
                new ObjectParameter("subject_id", subject_id) :
                new ObjectParameter("subject_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteSubject", subject_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getCourse");
        }
    
        public virtual ObjectResult<FACULTY> getFaculties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FACULTY>("getFaculties");
        }
    
        public virtual ObjectResult<FACULTY> getFaculties(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FACULTY>("getFaculties", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<int>> getFacultyIdByName(string faculty_name)
        {
            var faculty_nameParameter = faculty_name != null ?
                new ObjectParameter("faculty_name", faculty_name) :
                new ObjectParameter("faculty_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getFacultyIdByName", faculty_nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getGroup");
        }
    
        public virtual ObjectResult<GROUP> getGroupByProfessionName(string profession_name)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GROUP>("getGroupByProfessionName", profession_nameParameter);
        }
    
        public virtual ObjectResult<GROUP> getGroupByProfessionName(string profession_name, MergeOption mergeOption)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GROUP>("getGroupByProfessionName", mergeOption, profession_nameParameter);
        }
    
        public virtual ObjectResult<PROFESSION> getProfessionByFacultyName(string faculty_name)
        {
            var faculty_nameParameter = faculty_name != null ?
                new ObjectParameter("faculty_name", faculty_name) :
                new ObjectParameter("faculty_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROFESSION>("getProfessionByFacultyName", faculty_nameParameter);
        }
    
        public virtual ObjectResult<PROFESSION> getProfessionByFacultyName(string faculty_name, MergeOption mergeOption)
        {
            var faculty_nameParameter = faculty_name != null ?
                new ObjectParameter("faculty_name", faculty_name) :
                new ObjectParameter("faculty_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROFESSION>("getProfessionByFacultyName", mergeOption, faculty_nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getProfessionIdByName(string profession_name)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getProfessionIdByName", profession_nameParameter);
        }
    
        public virtual ObjectResult<PROFESSION> getProfessions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROFESSION>("getProfessions");
        }
    
        public virtual ObjectResult<PROFESSION> getProfessions(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROFESSION>("getProfessions", mergeOption);
        }
    
        public virtual ObjectResult<STUDENT> getStudentsForAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getStudentsForAdmin");
        }
    
        public virtual ObjectResult<STUDENT> getStudentsForAdmin(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getStudentsForAdmin", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<int>> getSubgroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getSubgroup");
        }
    
        public virtual ObjectResult<SUBJECT> getSubjectByFacultyProfessionName(string profession_name)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjectByFacultyProfessionName", profession_nameParameter);
        }
    
        public virtual ObjectResult<SUBJECT> getSubjectByFacultyProfessionName(string profession_name, MergeOption mergeOption)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjectByFacultyProfessionName", mergeOption, profession_nameParameter);
        }
    
        public virtual ObjectResult<SUBJECT> getSubjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjects");
        }
    
        public virtual ObjectResult<SUBJECT> getSubjects(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjects", mergeOption);
        }
    
        public virtual ObjectResult<LESSON> getTimetable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetable");
        }
    
        public virtual ObjectResult<LESSON> getTimetable(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetable", mergeOption);
        }
    
        public virtual ObjectResult<LESSON> getTimetableByWeekAdmin(string week, Nullable<int> group, Nullable<int> subgroup, Nullable<int> course)
        {
            var weekParameter = week != null ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(string));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var subgroupParameter = subgroup.HasValue ?
                new ObjectParameter("subgroup", subgroup) :
                new ObjectParameter("subgroup", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetableByWeekAdmin", weekParameter, groupParameter, subgroupParameter, courseParameter);
        }
    
        public virtual ObjectResult<LESSON> getTimetableByWeekAdmin(string week, Nullable<int> group, Nullable<int> subgroup, Nullable<int> course, MergeOption mergeOption)
        {
            var weekParameter = week != null ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(string));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var subgroupParameter = subgroup.HasValue ?
                new ObjectParameter("subgroup", subgroup) :
                new ObjectParameter("subgroup", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetableByWeekAdmin", mergeOption, weekParameter, groupParameter, subgroupParameter, courseParameter);
        }
    
        public virtual int insertFaculty(string faculty_name)
        {
            var faculty_nameParameter = faculty_name != null ?
                new ObjectParameter("faculty_name", faculty_name) :
                new ObjectParameter("faculty_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertFaculty", faculty_nameParameter);
        }
    
        public virtual int insertGroup(Nullable<int> profession_id, Nullable<int> faculty_id, Nullable<int> course, Nullable<int> group)
        {
            var profession_idParameter = profession_id.HasValue ?
                new ObjectParameter("profession_id", profession_id) :
                new ObjectParameter("profession_id", typeof(int));
    
            var faculty_idParameter = faculty_id.HasValue ?
                new ObjectParameter("faculty_id", faculty_id) :
                new ObjectParameter("faculty_id", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertGroup", profession_idParameter, faculty_idParameter, courseParameter, groupParameter);
        }
    
        public virtual int insertProfession(string profession_name, Nullable<int> faculty_id)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            var faculty_idParameter = faculty_id.HasValue ?
                new ObjectParameter("faculty_id", faculty_id) :
                new ObjectParameter("faculty_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertProfession", profession_nameParameter, faculty_idParameter);
        }
    
        public virtual int insertSubject(Nullable<int> profession_id, Nullable<int> faculty_id, string subject_name)
        {
            var profession_idParameter = profession_id.HasValue ?
                new ObjectParameter("profession_id", profession_id) :
                new ObjectParameter("profession_id", typeof(int));
    
            var faculty_idParameter = faculty_id.HasValue ?
                new ObjectParameter("faculty_id", faculty_id) :
                new ObjectParameter("faculty_id", typeof(int));
    
            var subject_nameParameter = subject_name != null ?
                new ObjectParameter("subject_name", subject_name) :
                new ObjectParameter("subject_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertSubject", profession_idParameter, faculty_idParameter, subject_nameParameter);
        }
    
        public virtual int setHeadman(Nullable<int> student_id)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setHeadman", student_idParameter);
        }
    
        public virtual int startData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("startData");
        }
    
        public virtual ObjectResult<STUDENT> getUserByLogin(string login)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getUserByLogin", loginParameter);
        }
    
        public virtual ObjectResult<STUDENT> getUserByLogin(string login, MergeOption mergeOption)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getUserByLogin", mergeOption, loginParameter);
        }
    
        public virtual int updateTimetable(string subject_name, Nullable<int> timetable_id)
        {
            var subject_nameParameter = subject_name != null ?
                new ObjectParameter("subject_name", subject_name) :
                new ObjectParameter("subject_name", typeof(string));
    
            var timetable_idParameter = timetable_id.HasValue ?
                new ObjectParameter("timetable_id", timetable_id) :
                new ObjectParameter("timetable_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateTimetable", subject_nameParameter, timetable_idParameter);
        }
    
        public virtual ObjectResult<string> exportToXML()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("exportToXML");
        }
    
        public virtual int importToXML()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("importToXML");
        }
    }
}
