//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STUDENT_GUI.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class STUDIFY2Entities : DbContext
    {
        public STUDIFY2Entities()
            : base("name=STUDIFY2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ADS> ADS { get; set; }
        public virtual DbSet<FACULTY> FACULTY { get; set; }
        public virtual DbSet<GROUP> GROUP { get; set; }
        public virtual DbSet<LESSON> LESSON { get; set; }
        public virtual DbSet<PROFESSION> PROFESSION { get; set; }
        public virtual DbSet<PROGRESS> PROGRESS { get; set; }
        public virtual DbSet<ROLE> ROLE { get; set; }
        public virtual DbSet<STUDENT> STUDENT { get; set; }
        public virtual DbSet<SUBGROUP> SUBGROUP { get; set; }
        public virtual DbSet<SUBJECT> SUBJECT { get; set; }
        public virtual DbSet<TASK> TASK { get; set; }
    
        public virtual int addProgress(Nullable<int> student_id, string subject_name)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            var subject_nameParameter = subject_name != null ?
                new ObjectParameter("subject_name", subject_name) :
                new ObjectParameter("subject_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProgress", student_idParameter, subject_nameParameter);
        }
    
        public virtual int addTask(Nullable<int> student_id, Nullable<System.DateTime> deadline, string subject, string content)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            var deadlineParameter = deadline.HasValue ?
                new ObjectParameter("deadline", deadline) :
                new ObjectParameter("deadline", typeof(System.DateTime));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("content", content) :
                new ObjectParameter("content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addTask", student_idParameter, deadlineParameter, subjectParameter, contentParameter);
        }
    
        public virtual int changeCompliteFalse(Nullable<int> task_id)
        {
            var task_idParameter = task_id.HasValue ?
                new ObjectParameter("task_id", task_id) :
                new ObjectParameter("task_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("changeCompliteFalse", task_idParameter);
        }
    
        public virtual int changeCompliteTrue(Nullable<int> task_id)
        {
            var task_idParameter = task_id.HasValue ?
                new ObjectParameter("task_id", task_id) :
                new ObjectParameter("task_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("changeCompliteTrue", task_idParameter);
        }
    
        public virtual int checkRole(Nullable<int> id, ObjectParameter role)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("checkRole", idParameter, role);
        }
    
        public virtual int checkStudentData(string login, string password, ObjectParameter result)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("checkStudentData", loginParameter, passwordParameter, result);
        }
    
        public virtual ObjectResult<Nullable<int>> checkTimetableByIdGroup(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkTimetableByIdGroup", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> countMessage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("countMessage");
        }
    
        public virtual int deleteMessage(Nullable<int> message_id)
        {
            var message_idParameter = message_id.HasValue ?
                new ObjectParameter("message_id", message_id) :
                new ObjectParameter("message_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteMessage", message_idParameter);
        }
    
        public virtual int deleteProgress(Nullable<int> progress_id)
        {
            var progress_idParameter = progress_id.HasValue ?
                new ObjectParameter("progress_id", progress_id) :
                new ObjectParameter("progress_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProgress", progress_idParameter);
        }
    
        public virtual int deleteTask(Nullable<int> task_id)
        {
            var task_idParameter = task_id.HasValue ?
                new ObjectParameter("task_id", task_id) :
                new ObjectParameter("task_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteTask", task_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getCourse");
        }
    
        public virtual ObjectResult<FACULTY> getFaculties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FACULTY>("getFaculties");
        }
    
        public virtual ObjectResult<FACULTY> getFaculties(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FACULTY>("getFaculties", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<int>> getFacultyIdByName(string faculty_name)
        {
            var faculty_nameParameter = faculty_name != null ?
                new ObjectParameter("faculty_name", faculty_name) :
                new ObjectParameter("faculty_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getFacultyIdByName", faculty_nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getGroup");
        }
    
        public virtual ObjectResult<Nullable<int>> getGroupId(Nullable<int> course, Nullable<int> group_number, Nullable<int> faculty_id, Nullable<int> profession_id)
        {
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            var group_numberParameter = group_number.HasValue ?
                new ObjectParameter("group_number", group_number) :
                new ObjectParameter("group_number", typeof(int));
    
            var faculty_idParameter = faculty_id.HasValue ?
                new ObjectParameter("faculty_id", faculty_id) :
                new ObjectParameter("faculty_id", typeof(int));
    
            var profession_idParameter = profession_id.HasValue ?
                new ObjectParameter("profession_id", profession_id) :
                new ObjectParameter("profession_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getGroupId", courseParameter, group_numberParameter, faculty_idParameter, profession_idParameter);
        }
    
        public virtual ObjectResult<ADS> getMessage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ADS>("getMessage");
        }
    
        public virtual ObjectResult<ADS> getMessage(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ADS>("getMessage", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<int>> getProfessionIdByName(string profession_name)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getProfessionIdByName", profession_nameParameter);
        }
    
        public virtual ObjectResult<PROFESSION> getProfessions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROFESSION>("getProfessions");
        }
    
        public virtual ObjectResult<PROFESSION> getProfessions(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROFESSION>("getProfessions", mergeOption);
        }
    
        public virtual ObjectResult<PROGRESS> getProgress(Nullable<int> student_id)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROGRESS>("getProgress", student_idParameter);
        }
    
        public virtual ObjectResult<PROGRESS> getProgress(Nullable<int> student_id, MergeOption mergeOption)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROGRESS>("getProgress", mergeOption, student_idParameter);
        }
    
        public virtual ObjectResult<TASK> getSatisfiedTasks(Nullable<int> student_id)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getSatisfiedTasks", student_idParameter);
        }
    
        public virtual ObjectResult<TASK> getSatisfiedTasks(Nullable<int> student_id, MergeOption mergeOption)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getSatisfiedTasks", mergeOption, student_idParameter);
        }
    
        public virtual ObjectResult<STUDENT> getStudentByCard(Nullable<int> card_number)
        {
            var card_numberParameter = card_number.HasValue ?
                new ObjectParameter("card_number", card_number) :
                new ObjectParameter("card_number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getStudentByCard", card_numberParameter);
        }
    
        public virtual ObjectResult<STUDENT> getStudentByCard(Nullable<int> card_number, MergeOption mergeOption)
        {
            var card_numberParameter = card_number.HasValue ?
                new ObjectParameter("card_number", card_number) :
                new ObjectParameter("card_number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getStudentByCard", mergeOption, card_numberParameter);
        }
    
        public virtual ObjectResult<STUDENT> getStudentsForHeadman(Nullable<int> course, Nullable<int> group, Nullable<int> faculty_id, Nullable<int> profession_id)
        {
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var faculty_idParameter = faculty_id.HasValue ?
                new ObjectParameter("faculty_id", faculty_id) :
                new ObjectParameter("faculty_id", typeof(int));
    
            var profession_idParameter = profession_id.HasValue ?
                new ObjectParameter("profession_id", profession_id) :
                new ObjectParameter("profession_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getStudentsForHeadman", courseParameter, groupParameter, faculty_idParameter, profession_idParameter);
        }
    
        public virtual ObjectResult<STUDENT> getStudentsForHeadman(Nullable<int> course, Nullable<int> group, Nullable<int> faculty_id, Nullable<int> profession_id, MergeOption mergeOption)
        {
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var faculty_idParameter = faculty_id.HasValue ?
                new ObjectParameter("faculty_id", faculty_id) :
                new ObjectParameter("faculty_id", typeof(int));
    
            var profession_idParameter = profession_id.HasValue ?
                new ObjectParameter("profession_id", profession_id) :
                new ObjectParameter("profession_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getStudentsForHeadman", mergeOption, courseParameter, groupParameter, faculty_idParameter, profession_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getSubgroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getSubgroup");
        }
    
        public virtual ObjectResult<Nullable<int>> getSubgroupId(Nullable<int> subgroup)
        {
            var subgroupParameter = subgroup.HasValue ?
                new ObjectParameter("subgroup", subgroup) :
                new ObjectParameter("subgroup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getSubgroupId", subgroupParameter);
        }
    
        public virtual ObjectResult<SUBJECT> getSubjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjects");
        }
    
        public virtual ObjectResult<SUBJECT> getSubjects(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjects", mergeOption);
        }
    
        public virtual ObjectResult<TASK> getTasksBySubject(Nullable<int> student_id, string subject)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getTasksBySubject", student_idParameter, subjectParameter);
        }
    
        public virtual ObjectResult<TASK> getTasksBySubject(Nullable<int> student_id, string subject, MergeOption mergeOption)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getTasksBySubject", mergeOption, student_idParameter, subjectParameter);
        }
    
        public virtual ObjectResult<TASK> getTasksForStudent(Nullable<int> student_id)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getTasksForStudent", student_idParameter);
        }
    
        public virtual ObjectResult<TASK> getTasksForStudent(Nullable<int> student_id, MergeOption mergeOption)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getTasksForStudent", mergeOption, student_idParameter);
        }
    
        public virtual ObjectResult<LESSON> getTimetable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetable");
        }
    
        public virtual ObjectResult<LESSON> getTimetable(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetable", mergeOption);
        }
    
        public virtual ObjectResult<LESSON> getTimetableByWeek(string week, Nullable<int> group_id, Nullable<int> subroup_id)
        {
            var weekParameter = week != null ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(string));
    
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            var subroup_idParameter = subroup_id.HasValue ?
                new ObjectParameter("subroup_id", subroup_id) :
                new ObjectParameter("subroup_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetableByWeek", weekParameter, group_idParameter, subroup_idParameter);
        }
    
        public virtual ObjectResult<LESSON> getTimetableByWeek(string week, Nullable<int> group_id, Nullable<int> subroup_id, MergeOption mergeOption)
        {
            var weekParameter = week != null ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(string));
    
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            var subroup_idParameter = subroup_id.HasValue ?
                new ObjectParameter("subroup_id", subroup_id) :
                new ObjectParameter("subroup_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetableByWeek", mergeOption, weekParameter, group_idParameter, subroup_idParameter);
        }
    
        public virtual ObjectResult<TASK> getUnsatisfiedTasks(Nullable<int> student_id)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getUnsatisfiedTasks", student_idParameter);
        }
    
        public virtual ObjectResult<TASK> getUnsatisfiedTasks(Nullable<int> student_id, MergeOption mergeOption)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TASK>("getUnsatisfiedTasks", mergeOption, student_idParameter);
        }
    
        public virtual ObjectResult<STUDENT> getUserByLogin(string login)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getUserByLogin", loginParameter);
        }
    
        public virtual ObjectResult<STUDENT> getUserByLogin(string login, MergeOption mergeOption)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STUDENT>("getUserByLogin", mergeOption, loginParameter);
        }
    
        public virtual int insertTimetable(Nullable<int> day, Nullable<int> number, string week, Nullable<int> group_id, Nullable<int> subgroup_id)
        {
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            var weekParameter = week != null ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(string));
    
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            var subgroup_idParameter = subgroup_id.HasValue ?
                new ObjectParameter("subgroup_id", subgroup_id) :
                new ObjectParameter("subgroup_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertTimetable", dayParameter, numberParameter, weekParameter, group_idParameter, subgroup_idParameter);
        }
    
        public virtual int registerStudent(Nullable<int> num_card, string name, string login, string password, Nullable<int> group_id, Nullable<int> subgroup_id)
        {
            var num_cardParameter = num_card.HasValue ?
                new ObjectParameter("num_card", num_card) :
                new ObjectParameter("num_card", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            var subgroup_idParameter = subgroup_id.HasValue ?
                new ObjectParameter("subgroup_id", subgroup_id) :
                new ObjectParameter("subgroup_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registerStudent", num_cardParameter, nameParameter, loginParameter, passwordParameter, group_idParameter, subgroup_idParameter);
        }
    
        public virtual int sendMessage(string content, Nullable<System.DateTime> date, Nullable<int> id)
        {
            var contentParameter = content != null ?
                new ObjectParameter("content", content) :
                new ObjectParameter("content", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sendMessage", contentParameter, dateParameter, idParameter);
        }
    
        public virtual int setPhoto(Nullable<int> student_id, byte[] photo)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setPhoto", student_idParameter, photoParameter);
        }
    
        public virtual int updateProgress(Nullable<int> complited, Nullable<int> needed, Nullable<int> progress_id)
        {
            var complitedParameter = complited.HasValue ?
                new ObjectParameter("complited", complited) :
                new ObjectParameter("complited", typeof(int));
    
            var neededParameter = needed.HasValue ?
                new ObjectParameter("needed", needed) :
                new ObjectParameter("needed", typeof(int));
    
            var progress_idParameter = progress_id.HasValue ?
                new ObjectParameter("progress_id", progress_id) :
                new ObjectParameter("progress_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProgress", complitedParameter, neededParameter, progress_idParameter);
        }
    
        public virtual int updateTimetable(string subject_name, Nullable<int> timetable_id)
        {
            var subject_nameParameter = subject_name != null ?
                new ObjectParameter("subject_name", subject_name) :
                new ObjectParameter("subject_name", typeof(string));
    
            var timetable_idParameter = timetable_id.HasValue ?
                new ObjectParameter("timetable_id", timetable_id) :
                new ObjectParameter("timetable_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateTimetable", subject_nameParameter, timetable_idParameter);
        }
    
        public virtual ObjectResult<SUBJECT> getSubjectByFacultyProfessionName(string profession_name)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjectByFacultyProfessionName", profession_nameParameter);
        }
    
        public virtual ObjectResult<SUBJECT> getSubjectByFacultyProfessionName(string profession_name, MergeOption mergeOption)
        {
            var profession_nameParameter = profession_name != null ?
                new ObjectParameter("profession_name", profession_name) :
                new ObjectParameter("profession_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUBJECT>("getSubjectByFacultyProfessionName", mergeOption, profession_nameParameter);
        }
    
        public virtual ObjectResult<LESSON> getTimetableByWeekAdmin(string week, Nullable<int> group, Nullable<int> subgroup, Nullable<int> course)
        {
            var weekParameter = week != null ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(string));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var subgroupParameter = subgroup.HasValue ?
                new ObjectParameter("subgroup", subgroup) :
                new ObjectParameter("subgroup", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetableByWeekAdmin", weekParameter, groupParameter, subgroupParameter, courseParameter);
        }
    
        public virtual ObjectResult<LESSON> getTimetableByWeekAdmin(string week, Nullable<int> group, Nullable<int> subgroup, Nullable<int> course, MergeOption mergeOption)
        {
            var weekParameter = week != null ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(string));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            var subgroupParameter = subgroup.HasValue ?
                new ObjectParameter("subgroup", subgroup) :
                new ObjectParameter("subgroup", typeof(int));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LESSON>("getTimetableByWeekAdmin", mergeOption, weekParameter, groupParameter, subgroupParameter, courseParameter);
        }
    }
}
